name: GX CSV Schema Validation

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/gx_run_csv.yaml'
      - 'run_csv_validation.py'
      - 'great_expectations/**'
      - 'requirements.txt'

permissions:
  contents: write

jobs:
  gx-csv-validation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (main branch)
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      # NEW STEP: Fetch historical validation metadata from gh-pages
      - name: Fetch existing GX validation metadata from gh-pages
        run: |
          git fetch origin gh-pages
          # Checkout the 'uncommitted/validations' directory from gh-pages
          # This brings ALL previous validation JSONs into our working directory.
          # If it doesn't exist yet, it's fine.
          mkdir -p great_expectations/uncommitted/validations # Ensure parent dir exists
          git checkout origin/gh-pages -- great_expectations/uncommitted/validations || echo "No existing validations found on gh-pages"

          # Also fetch expectation suites if they are modified on gh-pages and not main
          # This might be less common, but good to include if suites are managed there.
          mkdir -p great_expectations/expectations # Ensure parent dir exists
          git checkout origin/gh-pages -- great_expectations/expectations || echo "No existing expectations found on gh-pages"

      - name: Run CSV schema validation (which also regenerates Data Docs)
        run: python run_csv_validation.py

      - name: Commit updated GX Data Docs to gh-pages branch
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Switch to gh-pages or create if it doesn't exist
          git fetch origin gh-pages
          git switch gh-pages || git checkout --orphan gh-pages

          # Delete existing gx_site to ensure a clean copy of the fully regenerated site
          rm -rf gx_site

          # Copy the *entire* newly regenerated data docs (which now include all history)
          # from great_expectations/gx_docs_output to gx_site.
          # This gx_docs_output now contains all current and historical validation results,
          # as well as properly updated index.html and expectation suite pages.
          cp -r great_expectations/gx_docs_output gx_site/

          # Add all changes within gx_site (new files, modified files, deleted old ones)
          git add gx_site

          # Commit and push
          git commit -m "Update GX Data Docs with all validation history [auto]" || echo "No changes to commit"
          git push origin gh-pages # Use origin gh-pages with git push for clarity and avoid --force unless truly needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-slack-success:
    needs: gx-csv-validation
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack of success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#36a64f'
          SLACK_MESSAGE: |
            ✅ *GX CSV Schema Validation Passed*
            • Repo: `${{ github.repository }}`
            • Workflow: `${{ github.workflow }}`
            • Run: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View logs>

  notify-slack-failure:
    needs: gx-csv-validation
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack of failure
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#FF0000'
          SLACK_MESSAGE: |
            ❌ *GX CSV Schema Validation Failed*
            • Repo: `${{ github.repository }}`
            • Workflow: `${{ github.workflow }}`
            • Run: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View logs>
